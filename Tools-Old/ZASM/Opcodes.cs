namespace ZASM
{
    static class Ops
    {
        static public OpcodeEncoding[] EncodingData = 
        {
            // 00: NOP
            new OpcodeEncoding { Function = CommandID.NOP,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x00,
                               },

            // 01: LD rr, nn,
            new OpcodeEncoding { Function = CommandID.LD,
                                 Params = new CommandID[] { CommandID.WordReg | CommandID.Pos3, CommandID.WordData | CommandID.ImmidateWord, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x01,
                               },

            // 02: LD (BC), A,
            new OpcodeEncoding { Function = CommandID.LD,
                                 Params = new CommandID[] { CommandID.BC_Pointer, CommandID.A, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x02,
                               },

            // 03: INC rr,
            new OpcodeEncoding { Function = CommandID.INC,
                                 Params = new CommandID[] { CommandID.WordReg | CommandID.Pos3, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x03,
                               },

            // 04: INC r*,
            new OpcodeEncoding { Function = CommandID.INC,
                                 Params = new CommandID[] { CommandID.ByteRegIndex | CommandID.Pos2, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x04,
                               },

            // 05: DEC r*,
            new OpcodeEncoding { Function = CommandID.DEC,
                                 Params = new CommandID[] { CommandID.ByteRegIndex | CommandID.Pos2, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x05,
                               },

            // 06: LD r*, n,
            new OpcodeEncoding { Function = CommandID.LD,
                                 Params = new CommandID[] { CommandID.ByteRegIndex | CommandID.Pos2, CommandID.ByteData | CommandID.ImmidateByte, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x06,
                               },

            // 07: RLCA
            new OpcodeEncoding { Function = CommandID.RLCA,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x07,
                               },

            // 08: EX AF, AF,
            new OpcodeEncoding { Function = CommandID.EX,
                                 Params = new CommandID[] { CommandID.AF, CommandID.AF, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x08,
                               },

            // 09: ADD HL*, rr,
            new OpcodeEncoding { Function = CommandID.ADD,
                                 Params = new CommandID[] { CommandID.Address_Registers, CommandID.WordReg | CommandID.Pos3, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x09,
                               },

            // 0A: LD A, (BC),
            new OpcodeEncoding { Function = CommandID.LD,
                                 Params = new CommandID[] { CommandID.A, CommandID.BC_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x0A,
                               },

            // 0B: DEC rr,
            new OpcodeEncoding { Function = CommandID.DEC,
                                 Params = new CommandID[] { CommandID.WordReg | CommandID.Pos3, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x0B,
                               },

            // 0F: RRCA
            new OpcodeEncoding { Function = CommandID.RRCA,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x0F,
                               },

            // 10: DJNZ e-2,
            new OpcodeEncoding { Function = CommandID.DJNZ,
                                 Params = new CommandID[] { CommandID.Displacment | CommandID.ImmidateByte, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x10,
                               },

            // 12: LD (DE), A,
            new OpcodeEncoding { Function = CommandID.LD,
                                 Params = new CommandID[] { CommandID.DE_Pointer, CommandID.A, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x12,
                               },

            // 17: RLA
            new OpcodeEncoding { Function = CommandID.RLA,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x17,
                               },

            // 18: JR e-2,
            new OpcodeEncoding { Function = CommandID.JR,
                                 Params = new CommandID[] { CommandID.Displacment | CommandID.ImmidateByte, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x18,
                               },

            // 1A: LD A, (DE),
            new OpcodeEncoding { Function = CommandID.LD,
                                 Params = new CommandID[] { CommandID.A, CommandID.DE_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x1A,
                               },

            // 1F: RRA
            new OpcodeEncoding { Function = CommandID.RRA,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x1F,
                               },

            // 20: JR cc, e-2,
            new OpcodeEncoding { Function = CommandID.JR,
                                 Params = new CommandID[] { CommandID.HalfFlags | CommandID.Pos4, CommandID.Displacment | CommandID.ImmidateByte, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x20,
                               },

            // 22: LD (**), HL*,
            new OpcodeEncoding { Function = CommandID.LD,
                                 Params = new CommandID[] { CommandID.Address_Pointer | CommandID.ImmidateWord, CommandID.Address_Registers, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x22,
                               },

            // 27: DAA
            new OpcodeEncoding { Function = CommandID.DAA,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x27,
                               },

            // 2A: LD HL*, (**),
            new OpcodeEncoding { Function = CommandID.LD,
                                 Params = new CommandID[] { CommandID.Address_Registers, CommandID.Address_Pointer | CommandID.ImmidateWord, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x2A,
                               },

            // 2F: CPL A,
            new OpcodeEncoding { Function = CommandID.CPL,
                                 Params = new CommandID[] { CommandID.A, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x2F,
                               },

            // 32: LD (**), A,
            new OpcodeEncoding { Function = CommandID.LD,
                                 Params = new CommandID[] { CommandID.Address_Pointer | CommandID.ImmidateWord, CommandID.A, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x32,
                               },

            // 34: INC (HL*),
            new OpcodeEncoding { Function = CommandID.INC,
                                 Params = new CommandID[] { CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x34,
                               },

            // 35: DEC (HL*),
            new OpcodeEncoding { Function = CommandID.DEC,
                                 Params = new CommandID[] { CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x35,
                               },

            // 36: LD (HL*), n,
            new OpcodeEncoding { Function = CommandID.LD,
                                 Params = new CommandID[] { CommandID.Byte_Pointer, CommandID.ByteData | CommandID.ImmidateByte, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x36,
                               },

            // 37: SCF
            new OpcodeEncoding { Function = CommandID.SCF,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x37,
                               },

            // 3A: LD A, (**),
            new OpcodeEncoding { Function = CommandID.LD,
                                 Params = new CommandID[] { CommandID.A, CommandID.Address_Pointer | CommandID.ImmidateWord, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x3A,
                               },

            // 3F: CCF
            new OpcodeEncoding { Function = CommandID.CCF,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x3F,
                               },

            // 40: LD r*, r*,
            new OpcodeEncoding { Function = CommandID.LD,
                                 Params = new CommandID[] { CommandID.ByteRegIndex | CommandID.Pos2, CommandID.ByteRegIndex | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x40,
                               },

            // 46: LD r*, (HL*),
            new OpcodeEncoding { Function = CommandID.LD,
                                 Params = new CommandID[] { CommandID.ByteRegIndex | CommandID.Pos2, CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x46,
                               },

            // 70: LD (HL*), r*,
            new OpcodeEncoding { Function = CommandID.LD,
                                 Params = new CommandID[] { CommandID.Byte_Pointer, CommandID.ByteRegIndex | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x70,
                               },

            // 76: HALT
            new OpcodeEncoding { Function = CommandID.HALT,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x76,
                               },

            // 80: ADD A, r*,
            new OpcodeEncoding { Function = CommandID.ADD,
                                 Params = new CommandID[] { CommandID.A, CommandID.ByteRegIndex | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x80,
                               },

            // 86: ADD A, (HL*),
            new OpcodeEncoding { Function = CommandID.ADD,
                                 Params = new CommandID[] { CommandID.A, CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x86,
                               },

            // 88: ADC A, r*,
            new OpcodeEncoding { Function = CommandID.ADC,
                                 Params = new CommandID[] { CommandID.A, CommandID.ByteRegIndex | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x88,
                               },

            // 8E: ADC A, (HL*),
            new OpcodeEncoding { Function = CommandID.ADC,
                                 Params = new CommandID[] { CommandID.A, CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x8E,
                               },

            // 90: SUB A, r*,
            new OpcodeEncoding { Function = CommandID.SUB,
                                 Params = new CommandID[] { CommandID.A, CommandID.ByteRegIndex | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x90,
                               },

            // 96: SUB A, (HL*),
            new OpcodeEncoding { Function = CommandID.SUB,
                                 Params = new CommandID[] { CommandID.A, CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x96,
                               },

            // 98: SBC A, r*,
            new OpcodeEncoding { Function = CommandID.SBC,
                                 Params = new CommandID[] { CommandID.A, CommandID.ByteRegIndex | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x98,
                               },

            // 9E: SBC A, (HL*),
            new OpcodeEncoding { Function = CommandID.SBC,
                                 Params = new CommandID[] { CommandID.A, CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0x9E,
                               },

            // A0: AND A, r*,
            new OpcodeEncoding { Function = CommandID.AND,
                                 Params = new CommandID[] { CommandID.A, CommandID.ByteRegIndex | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xA0,
                               },

            // A6: AND A, (HL*),
            new OpcodeEncoding { Function = CommandID.AND,
                                 Params = new CommandID[] { CommandID.A, CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xA6,
                               },

            // A8: XOR A, r*,
            new OpcodeEncoding { Function = CommandID.XOR,
                                 Params = new CommandID[] { CommandID.A, CommandID.ByteRegIndex | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xA8,
                               },

            // AE: XOR A, (HL*),
            new OpcodeEncoding { Function = CommandID.XOR,
                                 Params = new CommandID[] { CommandID.A, CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xAE,
                               },

            // B0: OR A, r*,
            new OpcodeEncoding { Function = CommandID.OR,
                                 Params = new CommandID[] { CommandID.A, CommandID.ByteRegIndex | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xB0,
                               },

            // B6: OR A, (HL*),
            new OpcodeEncoding { Function = CommandID.OR,
                                 Params = new CommandID[] { CommandID.A, CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xB6,
                               },

            // B8: CP A, r*,
            new OpcodeEncoding { Function = CommandID.CP,
                                 Params = new CommandID[] { CommandID.A, CommandID.ByteRegIndex | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xB8,
                               },

            // BE: CP A, (HL*),
            new OpcodeEncoding { Function = CommandID.CP,
                                 Params = new CommandID[] { CommandID.A, CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xBE,
                               },

            // C0: RET cc,
            new OpcodeEncoding { Function = CommandID.RET,
                                 Params = new CommandID[] { CommandID.Flags | CommandID.Pos2, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xC0,
                               },

            // C1: POP rr,
            new OpcodeEncoding { Function = CommandID.POP,
                                 Params = new CommandID[] { CommandID.WordRegAF | CommandID.Pos3, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xC1,
                               },

            // C2: JP cc, nn,
            new OpcodeEncoding { Function = CommandID.JP,
                                 Params = new CommandID[] { CommandID.Flags | CommandID.Pos2, CommandID.Address | CommandID.ImmidateWord, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xC2,
                               },

            // C3: JP nn,
            new OpcodeEncoding { Function = CommandID.JP,
                                 Params = new CommandID[] { CommandID.Address | CommandID.ImmidateWord, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xC3,
                               },

            // C4: CALL cc, nn,
            new OpcodeEncoding { Function = CommandID.CALL,
                                 Params = new CommandID[] { CommandID.Flags | CommandID.Pos2, CommandID.Address | CommandID.ImmidateWord, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xC4,
                               },

            // C5: PUSH rr,
            new OpcodeEncoding { Function = CommandID.PUSH,
                                 Params = new CommandID[] { CommandID.WordRegAF | CommandID.Pos3, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xC5,
                               },

            // C6: ADD A, n,
            new OpcodeEncoding { Function = CommandID.ADD,
                                 Params = new CommandID[] { CommandID.A, CommandID.ByteData | CommandID.ImmidateByte, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xC6,
                               },

            // C7: RST n,
            new OpcodeEncoding { Function = CommandID.RST,
                                 Params = new CommandID[] { CommandID.Encoded | CommandID.Pos2, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xC7,
                               },

            // C9: RET
            new OpcodeEncoding { Function = CommandID.RET,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xC9,
                               },

            // CD: CALL nn,
            new OpcodeEncoding { Function = CommandID.CALL,
                                 Params = new CommandID[] { CommandID.Address | CommandID.ImmidateWord, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xCD,
                               },

            // CE: ADC A, n,
            new OpcodeEncoding { Function = CommandID.ADC,
                                 Params = new CommandID[] { CommandID.A, CommandID.ByteData | CommandID.ImmidateByte, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xCE,
                               },

            // D3: OUT n, A,
            new OpcodeEncoding { Function = CommandID.OUT,
                                 Params = new CommandID[] { CommandID.ByteData | CommandID.ImmidateByte, CommandID.A, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xD3,
                               },

            // D6: SUB A, n,
            new OpcodeEncoding { Function = CommandID.SUB,
                                 Params = new CommandID[] { CommandID.A, CommandID.ByteData | CommandID.ImmidateByte, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xD6,
                               },

            // D9: EXX
            new OpcodeEncoding { Function = CommandID.EXX,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xD9,
                               },

            // DB: IN A, n,
            new OpcodeEncoding { Function = CommandID.IN,
                                 Params = new CommandID[] { CommandID.A, CommandID.ByteData | CommandID.ImmidateByte, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xDB,
                               },

            // DE: SBC A, n,
            new OpcodeEncoding { Function = CommandID.SBC,
                                 Params = new CommandID[] { CommandID.A, CommandID.ByteData | CommandID.ImmidateByte, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xDE,
                               },

            // E3: EX (SP), HL*,
            new OpcodeEncoding { Function = CommandID.EX,
                                 Params = new CommandID[] { CommandID.SP_Pointer, CommandID.Address_Registers, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xE3,
                               },

            // E6: AND A, n,
            new OpcodeEncoding { Function = CommandID.AND,
                                 Params = new CommandID[] { CommandID.A, CommandID.ByteData | CommandID.ImmidateByte, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xE6,
                               },

            // E9: JP HL*,
            new OpcodeEncoding { Function = CommandID.JP,
                                 Params = new CommandID[] { CommandID.Address_Registers, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xE9,
                               },

            // EB: EX DE, HL,
            new OpcodeEncoding { Function = CommandID.EX,
                                 Params = new CommandID[] { CommandID.DE, CommandID.HL, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xEB,
                               },

            // EE: XOR A, n,
            new OpcodeEncoding { Function = CommandID.XOR,
                                 Params = new CommandID[] { CommandID.A, CommandID.ByteData | CommandID.ImmidateByte, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xEE,
                               },

            // F3: DI
            new OpcodeEncoding { Function = CommandID.DI,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xF3,
                               },

            // F6: OR A, n,
            new OpcodeEncoding { Function = CommandID.OR,
                                 Params = new CommandID[] { CommandID.A, CommandID.ByteData | CommandID.ImmidateByte, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xF6,
                               },

            // F9: LD SP, HL*,
            new OpcodeEncoding { Function = CommandID.LD,
                                 Params = new CommandID[] { CommandID.SP, CommandID.Address_Registers, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xF9,
                               },

            // FB: EI
            new OpcodeEncoding { Function = CommandID.EI,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xFB,
                               },

            // FE: CP A, n,
            new OpcodeEncoding { Function = CommandID.CP,
                                 Params = new CommandID[] { CommandID.A, CommandID.ByteData | CommandID.ImmidateByte, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0x00, Base = 0xFE,
                               },

            // CB00: RLC r,
            new OpcodeEncoding { Function = CommandID.RLC,
                                 Params = new CommandID[] { CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x00,
                               },

            // CB00: RLC (IX*), r,
            new OpcodeEncoding { Function = CommandID.RLC,
                                 Params = new CommandID[] { CommandID.Index_Pointer, CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x00,
                               },

            // CB06: RLC (HL*),
            new OpcodeEncoding { Function = CommandID.RLC,
                                 Params = new CommandID[] { CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x06,
                               },

            // CB08: RRC r,
            new OpcodeEncoding { Function = CommandID.RRC,
                                 Params = new CommandID[] { CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x08,
                               },

            // CB08: RRC (IX*), r,
            new OpcodeEncoding { Function = CommandID.RRC,
                                 Params = new CommandID[] { CommandID.Index_Pointer, CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x08,
                               },

            // CB0E: RRC (HL*),
            new OpcodeEncoding { Function = CommandID.RRC,
                                 Params = new CommandID[] { CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x0E,
                               },

            // CB10: RL r,
            new OpcodeEncoding { Function = CommandID.RL,
                                 Params = new CommandID[] { CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x10,
                               },

            // CB10: RL (IX*), r,
            new OpcodeEncoding { Function = CommandID.RL,
                                 Params = new CommandID[] { CommandID.Index_Pointer, CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x10,
                               },

            // CB16: RL (HL*),
            new OpcodeEncoding { Function = CommandID.RL,
                                 Params = new CommandID[] { CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x16,
                               },

            // CB18: RR r,
            new OpcodeEncoding { Function = CommandID.RR,
                                 Params = new CommandID[] { CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x18,
                               },

            // CB18: RR (IX*), r,
            new OpcodeEncoding { Function = CommandID.RR,
                                 Params = new CommandID[] { CommandID.Index_Pointer, CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x18,
                               },

            // CB1E: RR (HL*),
            new OpcodeEncoding { Function = CommandID.RR,
                                 Params = new CommandID[] { CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x1E,
                               },

            // CB20: SLA r,
            new OpcodeEncoding { Function = CommandID.SLA,
                                 Params = new CommandID[] { CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x20,
                               },

            // CB20: SLA (IX*), r,
            new OpcodeEncoding { Function = CommandID.SLA,
                                 Params = new CommandID[] { CommandID.Index_Pointer, CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x20,
                               },

            // CB26: SLA (HL*),
            new OpcodeEncoding { Function = CommandID.SLA,
                                 Params = new CommandID[] { CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x26,
                               },

            // CB28: SRA r,
            new OpcodeEncoding { Function = CommandID.SRA,
                                 Params = new CommandID[] { CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x28,
                               },

            // CB28: SRA (IX*), r,
            new OpcodeEncoding { Function = CommandID.SRA,
                                 Params = new CommandID[] { CommandID.Index_Pointer, CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x28,
                               },

            // CB2E: SRA (HL*),
            new OpcodeEncoding { Function = CommandID.SRA,
                                 Params = new CommandID[] { CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x2E,
                               },

            // CB30: SLL r,
            new OpcodeEncoding { Function = CommandID.SLL,
                                 Params = new CommandID[] { CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x30,
                               },

            // CB30: SLL (IX*), r,
            new OpcodeEncoding { Function = CommandID.SLL,
                                 Params = new CommandID[] { CommandID.Index_Pointer, CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x30,
                               },

            // CB36: SLL (HL*),
            new OpcodeEncoding { Function = CommandID.SLL,
                                 Params = new CommandID[] { CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x36,
                               },

            // CB38: SRL r,
            new OpcodeEncoding { Function = CommandID.SRL,
                                 Params = new CommandID[] { CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x38,
                               },

            // CB38: SRL (IX*), r,
            new OpcodeEncoding { Function = CommandID.SRL,
                                 Params = new CommandID[] { CommandID.Index_Pointer, CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x38,
                               },

            // CB3E: SRL (HL*),
            new OpcodeEncoding { Function = CommandID.SRL,
                                 Params = new CommandID[] { CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x3E,
                               },

            // CB40: BIT n, r,
            new OpcodeEncoding { Function = CommandID.BIT,
                                 Params = new CommandID[] { CommandID.Encoded | CommandID.Pos2, CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x40,
                               },

            // CB40: BIT n, (IX*), r,
            new OpcodeEncoding { Function = CommandID.BIT,
                                 Params = new CommandID[] { CommandID.Encoded | CommandID.Pos2, CommandID.Index_Pointer, CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x40,
                               },

            // CB46: BIT n, (HL*),
            new OpcodeEncoding { Function = CommandID.BIT,
                                 Params = new CommandID[] { CommandID.Encoded | CommandID.Pos2, CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x46,
                               },

            // CB80: RES n, r,
            new OpcodeEncoding { Function = CommandID.RES,
                                 Params = new CommandID[] { CommandID.Encoded | CommandID.Pos2, CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x80,
                               },

            // CB80: RES n, (IX*), r,
            new OpcodeEncoding { Function = CommandID.RES,
                                 Params = new CommandID[] { CommandID.Encoded | CommandID.Pos2, CommandID.Index_Pointer, CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x80,
                               },

            // CB86: RES n, (HL*),
            new OpcodeEncoding { Function = CommandID.RES,
                                 Params = new CommandID[] { CommandID.Encoded | CommandID.Pos2, CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0x86,
                               },

            // CBC0: SET n, r,
            new OpcodeEncoding { Function = CommandID.SET,
                                 Params = new CommandID[] { CommandID.Encoded | CommandID.Pos2, CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0xC0,
                               },

            // CBC0: SET n, (IX*), r,
            new OpcodeEncoding { Function = CommandID.SET,
                                 Params = new CommandID[] { CommandID.Encoded | CommandID.Pos2, CommandID.Index_Pointer, CommandID.ByteReg | CommandID.Pos1, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0xC0,
                               },

            // CBC6: SET n, (HL*),
            new OpcodeEncoding { Function = CommandID.SET,
                                 Params = new CommandID[] { CommandID.Encoded | CommandID.Pos2, CommandID.Byte_Pointer, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xCB, Base = 0xC6,
                               },

            // ED40: IN r, C,
            new OpcodeEncoding { Function = CommandID.IN,
                                 Params = new CommandID[] { CommandID.ByteReg | CommandID.Pos2, CommandID.C, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0x40,
                               },

            // ED41: OUT C, r,
            new OpcodeEncoding { Function = CommandID.OUT,
                                 Params = new CommandID[] { CommandID.C, CommandID.ByteReg | CommandID.Pos2, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0x41,
                               },

            // ED42: SBC HL, rr,
            new OpcodeEncoding { Function = CommandID.SBC,
                                 Params = new CommandID[] { CommandID.HL, CommandID.WordReg | CommandID.Pos3, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0x42,
                               },

            // ED43: LD (**), rr,
            new OpcodeEncoding { Function = CommandID.LD,
                                 Params = new CommandID[] { CommandID.Address_Pointer | CommandID.ImmidateWord, CommandID.WordReg | CommandID.Pos3, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0x43,
                               },

            // ED44: NEG A,
            new OpcodeEncoding { Function = CommandID.NEG,
                                 Params = new CommandID[] { CommandID.A, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0x44,
                               },

            // ED45: RETN
            new OpcodeEncoding { Function = CommandID.RETN,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0x45,
                               },

            // ED46: IM 0,
            new OpcodeEncoding { Function = CommandID.IM,
                                 Params = new CommandID[] { (CommandID)((int)CommandID.Encoded + 00), },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0x46,
                               },

            // ED47: LD I, A,
            new OpcodeEncoding { Function = CommandID.LD,
                                 Params = new CommandID[] { CommandID.I, CommandID.A, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0x47,
                               },

            // ED4A: ADC HL, rr,
            new OpcodeEncoding { Function = CommandID.ADC,
                                 Params = new CommandID[] { CommandID.HL, CommandID.WordReg | CommandID.Pos3, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0x4A,
                               },

            // ED4B: LD rr, (**),
            new OpcodeEncoding { Function = CommandID.LD,
                                 Params = new CommandID[] { CommandID.WordReg | CommandID.Pos3, CommandID.Address_Pointer | CommandID.ImmidateWord, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0x4B,
                               },

            // ED4D: RETI
            new OpcodeEncoding { Function = CommandID.RETI,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0x4D,
                               },

            // ED4F: LD R, A,
            new OpcodeEncoding { Function = CommandID.LD,
                                 Params = new CommandID[] { CommandID.R, CommandID.A, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0x4F,
                               },

            // ED56: IM 1,
            new OpcodeEncoding { Function = CommandID.IM,
                                 Params = new CommandID[] { (CommandID)((int)CommandID.Encoded + 01), },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0x56,
                               },

            // ED57: LD A, I,
            new OpcodeEncoding { Function = CommandID.LD,
                                 Params = new CommandID[] { CommandID.A, CommandID.I, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0x57,
                               },

            // ED5E: IM 2,
            new OpcodeEncoding { Function = CommandID.IM,
                                 Params = new CommandID[] { (CommandID)((int)CommandID.Encoded + 02), },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0x5E,
                               },

            // ED5F: LD A, R,
            new OpcodeEncoding { Function = CommandID.LD,
                                 Params = new CommandID[] { CommandID.A, CommandID.R, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0x5F,
                               },

            // ED67: RRD
            new OpcodeEncoding { Function = CommandID.RRD,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0x67,
                               },

            // ED6F: RLD
            new OpcodeEncoding { Function = CommandID.RLD,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0x6F,
                               },

            // ED70: IN C,
            new OpcodeEncoding { Function = CommandID.IN,
                                 Params = new CommandID[] { CommandID.C, },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0x70,
                               },

            // ED71: OUT C, 0,
            new OpcodeEncoding { Function = CommandID.OUT,
                                 Params = new CommandID[] { CommandID.C, (CommandID)((int)CommandID.Encoded + 00), },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0x71,
                               },

            // EDA0: LDI
            new OpcodeEncoding { Function = CommandID.LDI,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0xA0,
                               },

            // EDA1: CPI
            new OpcodeEncoding { Function = CommandID.CPI,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0xA1,
                               },

            // EDA2: INI
            new OpcodeEncoding { Function = CommandID.INI,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0xA2,
                               },

            // EDA3: OUTI
            new OpcodeEncoding { Function = CommandID.OUTI,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0xA3,
                               },

            // EDA8: LDD
            new OpcodeEncoding { Function = CommandID.LDD,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0xA8,
                               },

            // EDA9: CPD
            new OpcodeEncoding { Function = CommandID.CPD,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0xA9,
                               },

            // EDAA: IND
            new OpcodeEncoding { Function = CommandID.IND,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0xAA,
                               },

            // EDAB: OUTD
            new OpcodeEncoding { Function = CommandID.OUTD,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0xAB,
                               },

            // EDB0: LDIR
            new OpcodeEncoding { Function = CommandID.LDIR,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0xB0,
                               },

            // EDB1: CPIR
            new OpcodeEncoding { Function = CommandID.CPIR,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0xB1,
                               },

            // EDB2: INIR
            new OpcodeEncoding { Function = CommandID.INIR,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0xB2,
                               },

            // EDB3: OTIR
            new OpcodeEncoding { Function = CommandID.OTIR,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0xB3,
                               },

            // EDB8: LDDR
            new OpcodeEncoding { Function = CommandID.LDDR,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0xB8,
                               },

            // EDB9: CPDR
            new OpcodeEncoding { Function = CommandID.CPDR,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0xB9,
                               },

            // EDBA: INDR
            new OpcodeEncoding { Function = CommandID.INDR,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0xBA,
                               },

            // EDBB: OTDR
            new OpcodeEncoding { Function = CommandID.OTDR,
                                 Params = new CommandID[] { },
                                 Flags = ParamFlags.None,
                                 Prefix = 0xED, Base = 0xBB,
                               },

        };
    }
}
